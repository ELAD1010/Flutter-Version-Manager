; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "FVM"
#define MyAppShortName "fvm"
#define MyAppLCShortName "fvm"
#define MyAppVersion "1.0"
#define MyAppPublisher "ELAD1010"
#define MyAppURL "https://github.com/ELAD1010/Flutter-Version-Manager"
#define MyAppExeName "fvm.exe"
#define MyIcon "bin\flutter.ico"
#define MyAppId "9047B6C7-1E1B-4F3C-A1FC-233B9C8EB7EC"
#define ProjectRoot "."

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
PrivilegesRequired=admin
AppId={#MyAppId}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppCopyright=Copyright (C) 2024-Present ELAD1010.
AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={userappdata}\{#MyAppShortName}
DisableDirPage=no
DefaultGroupName={#MyAppName}
AllowNoIcons=yes
OutputDir={#ProjectRoot}\dist\{#MyAppVersion}
OutputBaseFilename={#MyAppLCShortName}-setup
SetupIconFile={#ProjectRoot}\{#MyIcon}
Compression=lzma
SolidCompression=yes
DisableProgramGroupPage=yes
UninstallDisplayIcon={app}\{#MyIcon}
VersionInfoVersion={#MyAppVersion}
VersionInfoCopyright=Copyright (C) 2024-Present ELAD1010.
VersionInfoCompany=ELAD1010
VersionInfoDescription=Flutter version manager for Windows
VersionInfoProductName={#MyAppShortName}
VersionInfoProductTextVersion={#MyAppVersion}
WizardStyle=modern

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
Name: "quicklaunchicon"; Description: "{cm:CreateQuickLaunchIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked; OnlyBelowVersion: 0,6.1

[Files]
Source: "{#ProjectRoot}\bin\*"; DestDir: "{app}"; BeforeInstall: PreInstall; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\{#MyAppShortName}"; Filename: "{app}\{#MyAppExeName}"; IconFilename: "{#MyIcon}"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"

[Code]
var
  SymlinkPage: TInputDirWizardPage;


function IsDirEmpty(dir: string): Boolean;
var
  FindRec: TFindRec;
  ct: Integer;
begin
  ct := 0;
  if FindFirst(ExpandConstant(dir + '\*'), FindRec) then
  try
    repeat
      if FindRec.Attributes and FILE_ATTRIBUTE_DIRECTORY = 0 then
        ct := ct+1;
    until
      not FindNext(FindRec);
  finally
    FindClose(FindRec);
    Result := ct = 0;
  end;
end;


var
  flutterInUse: string;

procedure TakeControl(FlutterPath: string; FlutterVersion: string);
var
  path, FlutterBinPath: string;
  a: bool;

begin
  // Move the existing flutter installation directory to the fvm root & update the path
  //RenameFile(FlutterPath, ExpandConstant('{app}')+'\'+FlutterVersion);
  //a := FileCopy(FlutterPath, ExpandConstant('{app}')+'\'+FlutterVersion, False);
  
  a := RenameFile(FlutterPath, ExpandConstant('{app}')+'\'+FlutterVersion);
  Log(IntToStr(Integer(a))); 
  //DeleteFile(FlutterPath);

  Log(FlutterPath);
  Log(ExpandConstant('{app}')+'\'+FlutterVersion);

  FlutterBinPath := FlutterPath + '\bin';

  RegQueryStringValue(HKEY_LOCAL_MACHINE,
    'SYSTEM\CurrentControlSet\Control\Session Manager\Environment',
    'Path', path);

  StringChangeEx(path,FlutterBinPath+ '\','',True);
  StringChangeEx(path,FlutterBinPath,'',True);
  StringChangeEx(path,FlutterBinPath+';;',';',True);

  RegWriteExpandStringValue(HKEY_LOCAL_MACHINE, 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment', 'Path', path);

  RegQueryStringValue(HKEY_CURRENT_USER,
    'Environment',
    'Path', path);

  StringChangeEx(path,FlutterBinPath+'\','',True);
  StringChangeEx(path,FlutterBinPath,'',True);
  StringChangeEx(path,FlutterBinPath+';;',';',True);

  RegWriteExpandStringValue(HKEY_CURRENT_USER, 'Environment', 'Path', path);

  flutterInUse := ExpandConstant('{app}')+'\'+FlutterVersion;

end;


function Ansi2String(AString:AnsiString):String;
var
 i : Integer;
 iChar : Integer;
 outString : String;
begin
 outString :='';
 for i := 1 to Length(AString) do
 begin
  iChar := Ord(AString[i]); //get int value
  outString := outString + Chr(iChar);
 end;

 Result := outString;
end;


procedure PreInstall();
var
  TmpResultFile, TmpFlutter, FlutterVersion, FlutterPath: string;
  stdout: Ansistring;
  ResultCode: integer;
  msg1, msg2, msg3, dir1: Boolean;
begin
  // Create a file to check for Flutter
  TmpFlutter := ExpandConstant('{tmp}') + '\flutter-check.ps1';
  SaveStringToFile(TmpFlutter, '$out = flutter doctor -v | Select-Object -Index 1' + #13#10 + '($out -split "\s+")[-1]', False);

  // Execute the node file and save the output temporarily
  TmpResultFile := ExpandConstant('{tmp}') + '\fvm_flutter_check.txt';
  Exec(ExpandConstant('{cmd}'), '/C powershell "'+TmpFlutter+'" > "' + TmpResultFile + '"', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
  DeleteFile(TmpFlutter)

  // Process the results
  LoadStringFromFile(TmpResultFile,stdout);
  FlutterPath := Trim(Ansi2String(stdout));
  if DirExists(FlutterPath) then begin
    Exec(ExpandConstant('{cmd}'), '/C powershell "(flutter --version | Select-Object -First 1) -split ''\s+'' | Select-Object -Index 1" > "' + TmpResultFile + '"', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
    LoadStringFromFile(TmpResultFile, stdout);
    FlutterVersion := 'v' + Trim(Ansi2String(stdout));  
    msg1 := SuppressibleMsgBox('Flutter '+FlutterVersion+' is already installed. Do you want FVM to control this version?', mbConfirmation, MB_YESNO, IDYES) = IDNO;
    if msg1 then begin
      msg2 := SuppressibleMsgBox('FVM cannot run in parallel with an existing Flutter installation. Flutter must be uninstalled before FVM can be installed, or you must allow FVM to control the existing installation. Do you want FVM to control flutter '+FlutterVersion+'?', mbConfirmation, MB_YESNO, IDYES) = IDYES;
      if msg2 then begin
        TakeControl(FlutterPath, FlutterVersion);
      end;
      if not msg2 then begin
        DeleteFile(TmpResultFile);
        WizardForm.Close;
      end;
    end;
    if not msg1 then
    begin
      TakeControl(FlutterPath, FlutterVersion);
    end;
  end;

  // Make sure the symlink directory doesn't exist
  if DirExists(SymlinkPage.Values[0]) then begin
    // If the directory is empty, just delete it since it will be recreated anyway.
    dir1 := IsDirEmpty(SymlinkPage.Values[0]);
    if dir1 then begin
      RemoveDir(SymlinkPage.Values[0]);
    end;
    if not dir1 then begin
      msg3 := SuppressibleMsgBox(SymlinkPage.Values[0]+' will be overwritten and all contents will be lost. Do you want to proceed?', mbConfirmation, MB_OKCANCEL, IDOK) = IDOK;
      if msg3 then begin
        RemoveDir(SymlinkPage.Values[0]);
      end;
      if not msg3 then begin
        WizardForm.Close;
      end;
    end;
  end;
end;


procedure InitializeWizard;
begin
  SymlinkPage := CreateInputDirPage(wpSelectDir,
    'Set Flutter Symlink', 'The active version of Flutter will always be available here.',
    'Select the folder in which Setup should create the symlink, then click Next.',
    False, '');
  SymlinkPage.Add('This directory will automatically be added to your system path.');
  SymlinkPage.Values[0] := ExpandConstant('{userappdata}\flutter');
end;


function InitializeUninstall(): Boolean;
var
  path: string;
  fvm_symlink: string;
begin
  SuppressibleMsgBox('Removing FVM for Windows will remove the fvm command and all versions of flutter, including global flutter packages.', mbInformation, MB_OK, IDOK);

  // Remove the symlink
  RegQueryStringValue(HKEY_LOCAL_MACHINE,
    'SYSTEM\CurrentControlSet\Control\Session Manager\Environment',
    'FVM_SYMLINK', fvm_symlink);
  RemoveDir(fvm_symlink);

  // Clean the registry
  RegDeleteValue(HKEY_LOCAL_MACHINE,
    'SYSTEM\CurrentControlSet\Control\Session Manager\Environment',
    'FVM_HOME')
  RegDeleteValue(HKEY_LOCAL_MACHINE,
    'SYSTEM\CurrentControlSet\Control\Session Manager\Environment',
    'FVM_SYMLINK')
  RegDeleteValue(HKEY_CURRENT_USER,
    'Environment',
    'FVM_HOME')
  RegDeleteValue(HKEY_CURRENT_USER,
    'Environment',
    'FVM_SYMLINK')

  RegQueryStringValue(HKEY_LOCAL_MACHINE,
    'SYSTEM\CurrentControlSet\Control\Session Manager\Environment',
    'Path', path);

  StringChangeEx(path,'%FVM_HOME%','',True);
  StringChangeEx(path,'%FVM_SYMLINK%','',True);
  StringChangeEx(path,';;',';',True);

  RegWriteExpandStringValue(HKEY_LOCAL_MACHINE, 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment', 'Path', path);

  RegQueryStringValue(HKEY_CURRENT_USER,
    'Environment',
    'Path', path);

  StringChangeEx(path,'%FVM_HOME%','',True);
  StringChangeEx(path,'%FVM_SYMLINK%','',True);
  StringChangeEx(path,';;',';',True);

  RegWriteExpandStringValue(HKEY_CURRENT_USER, 'Environment', 'Path', path);

  Result := True;
end;


// Generate the settings file based on user input & update registry
procedure CurStepChanged(CurStep: TSetupStep);
var
  path: string;
begin
  if CurStep = ssPostInstall then
  begin
    SaveStringToFile(ExpandConstant('{app}\settings.txt'), 'root: ' + ExpandConstant('{app}') + #13#10 + 'path: ' + SymlinkPage.Values[0] + #13#10, False);

    // Add Registry settings
    RegWriteExpandStringValue(HKEY_LOCAL_MACHINE, 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment', 'FVM_HOME', ExpandConstant('{app}'));
    RegWriteExpandStringValue(HKEY_LOCAL_MACHINE, 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment', 'FVM_SYMLINK', SymlinkPage.Values[0] + '\bin');
    RegWriteExpandStringValue(HKEY_CURRENT_USER, 'Environment', 'FVM_HOME', ExpandConstant('{app}'));
    RegWriteExpandStringValue(HKEY_CURRENT_USER, 'Environment', 'FVM_SYMLINK', SymlinkPage.Values[0] + '\bin');

    RegWriteStringValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{#MyAppId}_is1', 'DisplayVersion', '{#MyAppVersion}');

    // Update system and user PATH if needed
    RegQueryStringValue(HKEY_LOCAL_MACHINE,
      'SYSTEM\CurrentControlSet\Control\Session Manager\Environment',
      'Path', path);
    if Pos('%FVM_HOME%',path) = 0 then begin
      path := path+';%FVM_HOME%';
      StringChangeEx(path,';;',';',True);
      RegWriteExpandStringValue(HKEY_LOCAL_MACHINE, 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment', 'Path', path);
    end;
    if Pos('%FVM_SYMLINK%',path) = 0 then begin
      path := path+';%FVM_SYMLINK%';
      StringChangeEx(path,';;',';',True);
      RegWriteExpandStringValue(HKEY_LOCAL_MACHINE, 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment', 'Path', path);
    end;
     RegQueryStringValue(HKEY_CURRENT_USER,
      'Environment',
      'Path', path);
    if Pos('%FVM_HOME%',path) = 0 then begin
      path := path+';%FVM_HOME%';
      StringChangeEx(path,';;',';',True);
      RegWriteExpandStringValue(HKEY_CURRENT_USER, 'Environment', 'Path', path);
    end;
    if Pos('%FVM_SYMLINK%',path) = 0 then begin
      path := path+';%FVM_SYMLINK%';
      StringChangeEx(path,';;',';',True);
      RegWriteExpandStringValue(HKEY_CURRENT_USER, 'Environment', 'Path', path);
    end;
  end;
end;


function getSymLink(o: string): string;
begin
  Result := SymlinkPage.Values[0];
end;


function getCurrentVersion(o: string): string;
begin
  Result := flutterInUse;
end;


function isFlutterAlreadyInUse(): boolean;
begin
  Result := Length(flutterInUse) > 0;
end;

[Run]
Filename: "{cmd}"; Parameters: "/C ""mklink /D ""{code:getSymLink}"" ""{code:getCurrentVersion}"""" "; Check: isFlutterAlreadyInUse; Flags: runhidden;

[UninstallDelete]
Type: files; Name: "{app}\fvm.exe";
Type: files; Name: "{app}\elevate.cmd";
Type: files; Name: "{app}\elevate.vbs";
Type: files; Name: "{app}\flutter.ico";
Type: files; Name: "{app}\settings.txt";
Type: filesandordirs; Name: "{app}";

